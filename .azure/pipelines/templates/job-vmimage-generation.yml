# job-vmimage-generation.yml
# Description:
#   Job template used to generate VM Images using Packer. Packer will drop 
#   the completed image as a VHD blob into a storage account and then the
#   job will optionally publish the image to an Azure Shared Image Gallery.
#
#  Notes:
#   This job template was originally derived and based on the job template used in the 
#   product team's actions/virtual-environments repo.
#   see: https://github.com/actions/virtual-environments/blob/main/images.CI/linux-and-win/azure-pipelines/image-generation.yml
#
#   Some notes from the original template:
#     Ideally we would use GitHub Actions for this, but since we use self-hosted machines to run image builds
#     we need the following features to use GitHub Actions for Images CI:
#     - https://github.community/t5/GitHub-Actions/Make-secrets-available-to-builds-of-forks/m-p/30678#M508
#     - https://github.community/t5/GitHub-Actions/GitHub-Actions-Manual-Trigger-Approvals/td-p/31504
#     - https://github.community/t5/GitHub-Actions/Protecting-github-workflows/td-p/30290

parameters:
# The image type name that is given to the Packer 
# template. e.g. 'ubuntu2004', 'windows2019'
- name: imageType
  type: string

# The Virtual Machine size of the image to build
# template. e.g. 'Standard_D8s_v4', 'Standard_D4s_v4'
- name: vmSize
  type: string

# The markdown file that describes all the dependencies 
# that are installed on the image.
- name: imageReadmeName
  type: string

# The image definition name given to the Shared Image Gallery.
# Image definition name must contain only English letters, numbers, underscores, hyphens, and periods. 
# The name cannot begin or end with underscores, hyphens, or periods.
# see: https://docs.microsoft.com/en-us/azure/virtual-machines/shared-image-galleries#image-definitions
- name: imageDefinitionName
  type: string

# The job pool name
- name: pool
  type: object
  default: ''

# The description of the gallery image definition.
- name: imageDefinitionDescription
  type: string
  default: 'na'

# The name of the image definition offer.
# The image definition offer can contain only letters, numbers, 
# hyphens, periods, and underscores. The offer can't end with a period.
- name: imageOffer
  type: string

# The name of the image definition SKU.
# The image definition sku can contain only letters, numbers, 
# hyphens, periods, and underscores. The sku can't end with a period.
- name: imageSku
  type: string

# The type of the OS that is used when building the image.
# Accepted values: Linux, Windows
- name: imageOsType
  type: string

# Boolean to indicate to publish the image to the Shared Image Gallery
# after it's built.
- name: publish
  type: boolean
  default: true

jobs:

- job:
  displayName: VM Image Generation (${{ parameters.imageType }})
  timeoutInMinutes: 600 # 10 hours
  cancelTimeoutInMinutes: 30
  ${{ if ne(parameters.pool, '') }}:
    pool: ${{ parameters.pool }}
  variables:
  - group: Image Generation Variables
  - template: variables-vmimage-generation.yml
  - name: dateVersion
    value: $[format('{0:yyyyMMdd}', pipeline.startTime)]
  - name: dateVersionCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 0)]

  steps:

  - task: PowerShell@2
    displayName: 'Get Agent IP'
    inputs:
      targetType: 'inline'
      script: |
        $AgentIp = (Invoke-RestMethod http://ipinfo.io/json).ip
        Write-Host "Restricting access to packer generated VM to agent IP Address: $AgentIp"
        Write-Host "##vso[task.setvariable variable=AgentIp;]$AgentIp"

  - task: PowerShell@2
    displayName: 'Set image template path variables'
    inputs:
      targetType: 'inline'
      script: |
        $ImageType = "${{ parameters.imageType }}"
        Write-Host "ImageType=$ImageType"
        $TemplateDirectoryName = if ($ImageType.StartsWith("ubuntu")) { "linux" } else { "win" }
        Write-Host "TemplateDirectoryName=$TemplateDirectoryName"
        $TemplateDirectoryPath = Join-Path ".virtual-environments/images" $TemplateDirectoryName | Resolve-Path
        Write-Host "TemplateDirectoryPath=$TemplateDirectoryPath"
        $TemplatePath = Join-Path $TemplateDirectoryPath "$ImageType.json"
        Write-Host "##vso[task.setvariable variable=TemplateDirectoryPath;]$TemplateDirectoryPath"
        Write-Host "##vso[task.setvariable variable=TemplatePath;]$TemplatePath"
        Write-Host "TemplatePath=$TemplatePath"

  - task: CopyFiles@2
    displayName: 'Copy Readme file content'
    inputs:
      sourceFolder: $(TemplateDirectoryPath)
      contents: ${{ parameters.imageReadmeName }}
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true

  - task: PowerShell@2
    displayName: 'Build VM'
    inputs:
      targetType: filePath
      filePath: ./.azure/pipelines/scripts/build-image.ps1
      arguments: >
        -ResourcesNamePrefix $(Build.BuildId)
        -ClientId $(CLIENT_ID)
        -ClientSecret $(CLIENT_SECRET)
        -TemplatePath $(TemplatePath)
        -ResourceGroup $(resourceGroupName)
        -VmSize ${{ parameters.vmSize }}
        -StorageAccount $(storageAccountName)
        -SubscriptionId $(subscription)
        -TenantId $(AZURE_TENANT)
        -Location "$(location)"
        -VirtualNetworkName $(BUILD_AGENT_VNET_NAME)
        -VirtualNetworkRG $(BUILD_AGENT_VNET_RESOURCE_GROUP)
        -VirtualNetworkSubnet $(BUILD_AGENT_SUBNET_NAME)
        -AgentIp $(AgentIp)
    env:
      PACKER_LOG: 1
      PACKER_LOG_PATH: $(Build.ArtifactStagingDirectory)/packer-log.txt

  - task: PowerShell@2
    displayName: 'Output Readme file content'
    inputs:
      targetType: 'inline'
      script: |
        Get-Content -Path (Join-Path "$(TemplateDirectoryPath)" "${{ parameters.imageReadmeName }}")

  - task: PowerShell@2
    displayName: 'Print provisioners duration'
    inputs:
      targetType: 'filePath'
      filePath: ./.azure/pipelines/scripts/measure-provisioners-duration.ps1
      arguments: >
        -PackerLogPath "$(Build.ArtifactStagingDirectory)/packer-log.txt"
        -PrefixToPathTrim "$(TemplateDirectoryPath)"
        -PrintTopNLongest 25
        
  - ${{ if parameters.publish }}:
    - task: AzureCLI@2
      displayName: 'Convert to Managed Image'
      inputs:
        azureSubscription: AgentManagement
        scriptType: pscore
        scriptLocation: scriptPath
        scriptPath: $(System.DefaultWorkingDirectory)/.azure/pipelines/scripts/ConvertTo-ManagedImage.ps1
        arguments: >
          -ContainerName "$(PackerFinishedImageContainerName)"
          -DateVersion "$(dateVersion)"
          -DateVersionCounter "$(dateVersionCounter)"
          -Location "$(location)"
          -Prefix "$(blobPrefix)"
          -ResourceGroupName $(resourceGroupName)
          -StorageAccountName "$(storageAccountName)"
          -ImageType "${{ parameters.imageType }}"
          -Tags imagedefinition=${{ parameters.imageDefinitionName }},adoproject=$(System.TeamProject),builddefinitionid=$(System.DefinitionId),commit=$(Build.SourceVersion),branch=$(Build.SourceBranch),repo=$(Build.Repository.Name),repourl=$(Build.Repository.Uri),buildid=$(Build.BuildId)
          -Clean

    - task: AzureCLI@2
      displayName: 'Publish to Shared Image Gallery'
      inputs:
        azureSubscription: AgentManagement
        scriptType: pscore
        scriptLocation: scriptPath
        scriptPath: $(System.DefaultWorkingDirectory)/.azure/pipelines/scripts/Publish-ImageToSharedGallery.ps1
        arguments: >
          -ResourceGroupName $(resourceGroupName)
          -SharedImageGalleryName $(SharedImageGalleryName)
          -ImageDefinitionName "${{ parameters.imageDefinitionName }}"
          -ImageDefinitionDescription "${{ parameters.imageDefinitionDescription }}"
          -Location "$(location)"
          -ImagePublisher "$(ImagePublisher)"
          -ImageOffer "${{ parameters.imageOffer }}"
          -ImageSku "${{ parameters.imageSku }}"
          -OsType ${{ parameters.imageOsType }}
          -ImageVersion $(versionSemantic)
          -ImageName "$(imageName)"
          -EndOfLifeDate "$(EndOfLife)"
          -ImageVersionTags imagedefinition=${{ parameters.imageDefinitionName }},adoproject=$(System.TeamProject),builddefinitionid=$(System.DefinitionId),commit=$(Build.SourceVersion),branch=$(Build.SourceBranch),repo=$(Build.Repository.Name),repourl=$(Build.Repository.Uri),buildid=$(Build.BuildId)
          -ImageDefinitionTags imagedefinition=${{ parameters.imageDefinitionName }},adoproject=$(System.TeamProject),builddefinitionid=$(System.DefinitionId),branch=$(Build.SourceBranch),repo=$(Build.Repository.Name),repourl=$(Build.Repository.Uri)
          -Clean

  - task: PublishBuildArtifacts@1
    displayName: 'Publish ServicesBuild'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: drop

  - task: PowerShell@2
    displayName: 'Clean up resources'
    condition: always()
    inputs:
      targetType: filePath
      filePath: ./.azure/pipelines/scripts/cleanup.ps1
      arguments: >
        -ResourcesNamePrefix $(Build.BuildId)
        -Image ${{ parameters.imageType }}
        -StorageAccount $(storageAccountName)
        -SubscriptionId $(subscription)
        -ClientId $(CLIENT_ID)
        -ClientSecret $(CLIENT_SECRET)
        -TenantId $(AZURE_TENANT)
