  # https://docs.microsoft.com/en-us/azure/virtual-machines/windows/upload-generalized-managed
  # https://docs.microsoft.com/en-us/azure/virtual-machines/windows/disks-upload-vhd-to-managed-disk-powershell
  # https://docs.microsoft.com/en-us/previous-versions/azure/virtual-machines/scripts/virtual-machines-windows-powershell-upload-generalized-script

name: $(BuildDefinitionName)-${{ parameters.imageType }}-$(Date:yyyyMMdd)$(Rev:.r)
trigger: none

parameters: 
- name: imageType
  displayName: Image Type
  type: string
  default: Ubuntu2004
  values:
  - Windows2016
  - Windows2019
  - Ubuntu1604
  - Ubuntu1804
  - Ubuntu2004
- name: osType
  displayName: Operating System Type
  type: string
  default: Linux
  values:
  - Windows
  - Linux
- name: disableImageGenertion
  displayName: Disable Image Generation
  type: boolean
  default: false

- name: pool
  type: object
  displayName: Agent Pool for Packer generation
  default:
    vmImage: 'ubuntu-latest'

variables:
  versionMajor: 1
  versionMinor: 1
  versionPatch: $[counter(format('{0}.{1}', variables['versionMajor'], variables['versionMinor']), 0)]
  versionSemantic: $[format('{0}.{1}.{2}', variables['versionMajor'], variables['versionMinor'], variables['versionPatch'])]
  dateVersion: $[format('{0:yyyyMMdd}', pipeline.startTime)]
  dateVersionCounter: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 0)]

# Can set the pool to a Azure Pipelines VM image. 
# You might need to set this to an internal pool 
# if you need to longer timeout for windows images since
# Azure Pipelines seem to time out around 6 hours and windows
# images take just under 7 hours to be built.

jobs:

- job: generatePackerImage
  displayName: Generate Packer Image
  timeoutInMinutes: 720 # 12 Hours
  pool: ${{ parameters.pool }}

  steps:
  - script: echo Building image ${{ parameters.imageType }}
    displayName: Print Image Type

  - pwsh: |
      choco install packer
    displayName: Install Packer - Windows
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - script: |
      curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
      sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
      sudo apt-get update && sudo apt-get install packer
    displayName: Install Packer - Linux
    condition: eq( variables['Agent.OS'], 'Linux' )

  # Setting the Capture Container Name for the Packer ARM builder.
  # This value represents the "directory" in the container where the
  # vhd blob exists. This is set based on the build number run so we can 
  # identify it among other images that are being built.
  # see: https://www.packer.io/docs/builders/azure/arm#capture_container_name
  - pwsh: |
      $captureContainerName = "$(Build.BuildNumber)"
      Write-Host "Initialize captureContainerName to $captureContainerName"

      # Packers requires the capture container name to follow the pattern ^[a-z0-9][a-z0-9\\-]{2,62}$
      $packerRegex = "^[a-z0-9][a-z0-9\\-]{2,62}$"
      $captureContainerName = $captureContainerName.ToLower() -replace "\.", "-"
      if (($captureContainerName -cmatch $packerRegex) -eq $false) {
        Write-Host "##vso[task.logissue type=error]captureContainerName:$captureContainerName doesn't match the pattern ^[a-z0-9][a-z0-9\\-]{2,62}$"
        exit 1
      }

      Write-Host "Setting variables captureContainerName to value $captureContainerName"
      Write-Host "##vso[task.setvariable variable=captureContainerName;]$captureContainerName"
    displayName: Generate Capture Container Name

  - task: PowerShell@2
    condition: ne('${{ parameters.disableImageGenertion }}', true)
    inputs:
      targetType: 'filePath'
      timeoutInMinutes: 720 # 12 Hours
      filePath: $(Build.SourcesDirectory)/provision/scripts/New-PackerImage.ps1
      arguments: >
        -SubscriptionId "cbadc96b-2923-4459-bb2d-b237af7f84d6"
        -BuildResourceGroupName "$(BuildResourceGroupName)"
        -CaptureContainerName "$(captureContainerName)"
        -ResourceGroupName "$(ResourceGroupName)"
        -ImageGenerationRepositoryRoot "$(Build.SourcesDirectory)"
        -ImageType "${{ parameters.imageType }}"
        -ServicePrincipalClientId "$(ServicePrincipalClientId)"
        -ServicePrincipalObjectId "$(ServicePrincipalObjectId)"
        -ServicePrincipalClientSecret "$(ServicePrincipalClientSecret)"
        -TenantId "$(TenantId)"
        -StorageAccountName "$(StorageAccountName)"
      pwsh: true
    displayName: Run Image Generation

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Packer Results'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: '$(Pipeline.Workspace)'
      ArtifactName: drop-imagegeneration

- job: publishPackerImage
  displayName: Publish Packer Image
  timeoutInMinutes: 120 # 2 Hours
  dependsOn: generatePackerImage

  steps:

  - script: echo Publishing image ${{ parameters.imageType }}
    displayName: Print Image Type

  # Setting the Capture Container Name for the Packer ARM builder.
  # This value represents the "directory" in the container where the
  # vhd blob exists. This is set based on the build number run so we can 
  # identify it among other images that are being built. In addition, you can 
  # set an override value if you choose not to run the long image building job and you 
  # already have a vhd built, but want to publish it. 
  # This task sets the 'captureContainerName' variable so subsequence tasks 
  # have it available.
  # see: https://www.packer.io/docs/builders/azure/arm#capture_container_name
  - pwsh: |
      $captureContainerNameOverride = "$(captureContainerNameOverride)"
      $captureContainerName = "$(Build.BuildNumber)"
      Write-Host "Initialize captureContainerName to $captureContainerName"
      Write-Host "Initialize captureContainerNameOverride to $captureContainerNameOverride"

      if ([string]::IsNullOrEmpty($captureContainerNameOverride) -eq $false) {
        Write-Host "captureContainerNameOverride value exists, overriding captureContainerName"
        $captureContainerName = $captureContainerNameOverride
      }
      
      # Packers requires the capture container name to follow the pattern ^[a-z0-9][a-z0-9\\-]{2,62}$
      $packerRegex = "^[a-z0-9][a-z0-9\\-]{2,62}$"
      $captureContainerName = $captureContainerName.ToLower() -replace "\.", "-"
      if (($captureContainerName -cmatch $packerRegex) -eq $false) {
        Write-Host "##vso[task.logissue type=error]captureContainerName:$captureContainerName doesn't match the pattern ^[a-z0-9][a-z0-9\\-]{2,62}$"
        exit 1
      }

      Write-Host "Setting variables captureContainerName to value $captureContainerName"
      Write-Host "##vso[task.setvariable variable=captureContainerName;]$captureContainerName"
    displayName: Generate Capture Container Name

  - task: AzureCLI@2
    displayName: Convert to Managed Image
    condition: succeeded()
    inputs:
      azureSubscription: "AES JPS (New)"
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $storageAccountName = "$(StorageAccountName)"
        Write-Host "storageAccountName=$storageAccountName"
        $captureContainerName = "$(captureContainerName)"
        Write-Host "captureContainerName=$captureContainerName"
        $containerName = "system"
        $prefix = "Microsoft.Compute/Images/{0}" -f $captureContainerName
        Write-Host "prefix=$prefix"
        $vhdName = az storage blob list --container-name $containerName --account-name $storageAccountName --prefix $prefix --query "[?contains(name, '.vhd')].name | [0]" -o tsv
        Write-Host "vhdName=$vhdName"
        $vhdDiskUri = "https://{0}.blob.core.windows.net/system/{1}" -f $storageAccountName, $vhdName
        Write-Host "vhdDiskUri=$vhdDiskUri"
        $imageName = "{0}-{1}-{2}.{3}" -f "packer", "${{ parameters.imageType }}", "$(dateVersion)", "$(dateVersionCounter)"
        Write-Host "imageName=$imageName"
        $id = az disk create --resource-group $(ResourceGroupName) --name $imageName --source $vhdDiskUri --query "id" -o tsv
        Write-Host "id=$id"
        az image create --resource-group $(ResourceGroupName) --name $imageName --os-type Linux --source $id
        Write-Host "Created managed image"
        Write-Host "##vso[task.setvariable variable=imageName;]$imageName"

  - task: AzureCLI@2
    displayName: Publish to Image Gallery
    condition: succeeded()
    inputs:
      azureSubscription: "AES JPS (New)"
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $resourceGroupName = "$(ResourceGroupName)"
        $galleryName = "$(SharedImageGalleryName)"
        $imageDefinitionName = "${{ parameters.imageType }}"

        $imagePublisher = "$(ImagePublisher)"
        $imageOffer = "$(ImageOffer)"
        $imageSku = "${{ parameters.imageType }}"

        $osType = "${{ parameters.osType }}"
        $imageVersion = "$(versionSemantic)"
        Write-Host "imageVersion=$imageVersion"

        az sig image-definition create `
          --resource-group $resourceGroupName `
          --gallery-name $galleryName `
          --gallery-image-definition $imageDefinitionName `
          --publisher $imagePublisher `
          --offer $imageOffer `
          --sku $imageSku `
          --os-type $osType `
          --os-state Generalized

        $imageName = "$(imageName)"
        $imageId = az image list --resource-group $(ResourceGroupName) --query "[?contains(name, '$imageName')].id | [0]" -o tsv

        Write-Host "imageId=$imageId"

        az sig image-version create `
            --resource-group $resourceGroupName `
            --gallery-name $galleryName `
            --gallery-image-definition $imageDefinitionName `
            --gallery-image-version $imageVersion `
            --managed-image $imageId

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Packer Results'
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: '$(Pipeline.Workspace)'
      ArtifactName: drop-imagepublication
